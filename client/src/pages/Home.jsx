import React, { useState, useEffect } from 'react';
import { Loader, Card, FormField } from '../components';
import { useNavigate } from 'react-router-dom';

const RenderCards = ({ data, title }) => {
  if (data && data.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  } else {
    return (
      <h2 className='mt-5 font-bold text-[#6449ff] text-xl uppercase'>{title}</h2>
    );
  }
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);
  const navigate = useNavigate(); // Use useNavigate for navigation

  useEffect(() => {
    // Check if user is authenticated (has a token)
    const token = localStorage.getItem('token');
    if (!token) {
      // Redirect to login page if not authenticated
      navigate('/');
      return; // Return early to prevent further execution of this component
    }

    // Fetch posts if the user is authenticated
    fetchPosts();

    // Redirect to the profile page if authenticated
    navigate('/profile');
  }, [navigate]);

  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch('http://localhost:8080/api/v1/post', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );

        setSearchedResults(searchResult);
      }, 500)
    );
  };

  return (
    <section className='max-w-7xl mx-auto'>
      <div>
        <h1 className='font-exttrabold text-black text-[32px]'>Showcase</h1>
        <p className='mt-1 text-pink-500 text-[15px] max-w[500px]'>
          Images generated by other users.
        </p>
      </div>

      <div className='mt-16'>
        <FormField
          labelName='Search posts'
          type='text'
          name='text'
          placeholder='Search something...'
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className='mt-10'>
        {loading ? (
          <div className='flex justify-center items-center'>
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className='font-medium text-black text-xl mb-3'>
                Results for <span className='text-[#222328]'> {searchText} </span>
              </h2>
            )}
            <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title='No results found'
                />
              ) : (
                <RenderCards data={allPosts} title='No posts found.' />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
